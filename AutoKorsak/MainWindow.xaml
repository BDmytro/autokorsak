<Window x:Class="AutoKorsak.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:custom="clr-namespace:AutoKorsak"
        Title="MainWindow" Height="303" Width="813" UseLayoutRounding="True" OverridesDefaultStyle="False" mc:Ignorable="d" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:my="clr-namespace:Tourtoss.BC;assembly=TourtossBC" Loaded="Window_Loaded" Name="tour" Initialized="tour_Initialized" Closing="tour_Closing" Icon="/AutoKorsak;component/cup.ico">
    <Window.Resources>
        <Style x:Key="CenterCellStyle" TargetType="{x:Type DataGridCell}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center"
	                              VerticalAlignment="Center"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="RightCellStyle" TargetType="{x:Type DataGridCell}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Right"
	                              VerticalAlignment="Center"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="CenterColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center"
	                              VerticalAlignment="Center"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <custom:SuperBarIconConverter x:Key="iconSuperBarConv"/>
        <custom:GameResultConverter x:Key="GameResultConv"/>
        <custom:NewRatingConverter x:Key="NewRatingConv"/>
        <custom:PairingMemberConverter x:Key="PairingMemberConv"/>

        <DataTemplate x:Key="SuperBarColumnCellTemplate">
            <!--Image Source="C:\work\tosser\ts\AutoKorsak\Images\questionmark.png"
                                   Width="12" Height="12" x:Name="SuperBarCellItem"
                                   Visibility="Hidden"/ -->
            <TextBlock Name="SuperBarCellItem" Width="4" Margin="0"/>
            <DataTemplate.Triggers>
                <DataTrigger Value="1">
                    <DataTrigger.Binding>
                        <Binding Converter="{StaticResource iconSuperBarConv}"/>
                    </DataTrigger.Binding>
                    <Setter TargetName="SuperBarCellItem" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="SuperBarCellItem" Property="Background" Value="#eca806"/>
                </DataTrigger>
                <DataTrigger Value="2">
                    <DataTrigger.Binding>
                        <Binding Converter="{StaticResource iconSuperBarConv}"/>
                    </DataTrigger.Binding>
                    <Setter TargetName="SuperBarCellItem" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="SuperBarCellItem" Property="Background" Value="#168ccd"/>
                </DataTrigger>
                <DataTrigger Value="3">
                    <DataTrigger.Binding>
                        <Binding Converter="{StaticResource iconSuperBarConv}"/>
                    </DataTrigger.Binding>
                    <Setter TargetName="SuperBarCellItem" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="SuperBarCellItem" Property="Background" Value="red"/>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate x:Key="ResultColumnCellTemplate">
            <TextBlock Name="ResultCellItem" Text="{Binding}"/>
            <DataTemplate.Triggers>
                <DataTrigger Value="True">
                    <DataTrigger.Binding>
                        <Binding Converter="{StaticResource GameResultConv}"/>
                    </DataTrigger.Binding>
                    <Setter TargetName="ResultCellItem" Property="Background" Value="#fbbeb4"/>
                    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate x:Key="NewRatingColumnCellTemplate">
            <TextBlock Name="NewRatingCellItem" Text="{Binding}" Margin="2,0"/>
            <DataTemplate.Triggers>
                <DataTrigger Value="True">
                    <DataTrigger.Binding>
                        <Binding Converter="{StaticResource NewRatingConv}"/>
                    </DataTrigger.Binding>
                    <Setter TargetName="NewRatingCellItem" Property="Background" Value="#aae881"/>
                    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate x:Key="PairingMemberColumnCellTemplate">
            <Image Name="PairingMemberCellItem" Source="/AutoKorsak;component/Images/award-star-gold.png" Visibility="Hidden" Width="16" Height="16" />
            <DataTemplate.Triggers>
                <DataTrigger Value="True">
                    <DataTrigger.Binding>
                        <Binding Converter="{StaticResource PairingMemberConv}"/>
                    </DataTrigger.Binding>
                    <Setter TargetName="PairingMemberCellItem" Property="Visibility" Value="Visible"/>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>
        
        <!-- This is the "root node" in the virtual branch
   attached to the logical tree. It has its
   DataContext set by the Binding applied to the
   Window's DataContext property. -->
        <FrameworkElement x:Key="DataContextBridge" />
    </Window.Resources>

    <Window.DataContext>
        <!-- This Binding sets the DataContext on the "root node"
   of the virtual logical tree branch.  This Binding
   must be applied to the DataContext of the element
   which is actually assigned the data context value. -->
        <Binding
    Mode="OneWayToSource"
    Path="DataContext"
    Source="{StaticResource DataContextBridge}"
   />
    </Window.DataContext>
    
    <Window.CommandBindings>
        <CommandBinding Command="ApplicationCommands.Open"
                  Executed="OpenCmdExecuted"
                  CanExecute="OpenCmdCanExecute"/>
        <CommandBinding Command="ApplicationCommands.Save"
                  Executed="SaveCmdExecuted"
                  CanExecute="SaveCmdCanExecute"/>
        <CommandBinding Command="ApplicationCommands.Close"
                  Executed="CloseCmdExecuted"
                  CanExecute="CloseCmdCanExecute"/>
        <CommandBinding Command="Print"
                  Executed="PrintCmdExecuted"
                  CanExecute="PrintCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.AutoPairingCmd}"
                  Executed="AutoPairingCmdExecuted"
                  CanExecute="AutoPairingCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.CleanPairsCmd}"
                  Executed="CleanPairsCmdExecuted"
                  CanExecute="CleanPairsCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.AddPlayerCmd}"
                  Executed="AddPlayerCmdExecuted"
                  CanExecute="AddPlayerCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.ExportWallListCmd}"
                  Executed="ExportWallListCmdExecuted"
                  CanExecute="ExportWallListCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.ExportWallListRoundRobinCmd}"
                  Executed="ExportWallListRoundRobinCmdExecuted"
                  CanExecute="ExportWallListRoundRobinCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.ExportWallListForRatingCmd}"
                  Executed="ExportWallListForRatingCmdExecuted"
                  CanExecute="ExportWallListForRatingCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.ExportWallListForRatingEngCmd}"
                  Executed="ExportWallListForRatingEngCmdExecuted"
                  CanExecute="ExportWallListForRatingCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.ExportPairingCmd}"
                  Executed="ExportPairingCmdExecuted"
                  CanExecute="ExportPairingCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.PropertiesCmd}"
                  Executed="PropertiesCmdExecuted"
                  CanExecute="PropertiesCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.SaveToCmd}"
                  Executed="SaveToCmdExecuted"
                  CanExecute="SaveToCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.ExitCmd}"
                  Executed="ExitCmdExecuted"
                  CanExecute="ExitCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.UpdateRatingCmd}"
                  Executed="UpdateRatingCmdExecuted"
                  CanExecute="UpdateRatingCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.PrintPairingCmd}"
                  Executed="PrintPairingCmdExecuted"
                  CanExecute="PrintPairingCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.AddPairCmd}"
                  Executed="AddPairCmdExecuted"
                  CanExecute="AddPairCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.SetThemeAeroCmd}"
                  Executed="SetThemeAeroCmdExecuted"/>
        <CommandBinding Command="{x:Static custom:MainWindow.SetThemeClassicCmd}"
                  Executed="SetThemeClassicCmdExecuted"/>
        <CommandBinding Command="{x:Static custom:MainWindow.SetThemeLunaCmd}"
                  Executed="SetThemeLunaCmdExecuted"/>
        <CommandBinding Command="{x:Static custom:MainWindow.SetThemeRoyaleCmd}"
                  Executed="SetThemeRoyaleCmdExecuted"/>
        <CommandBinding Command="{x:Static custom:MainWindow.SetThemeDefaultCmd}"
                  Executed="SetThemeDefaultCmdExecuted"/>
        <CommandBinding Command="{x:Static custom:MainWindow.AboutCmd}"
                  Executed="AboutCmdExecuted" />
        <CommandBinding Command="{x:Static custom:MainWindow.RemovePreliminaryPlayersCmd}"
                  Executed="RemovePreliminaryPlayersCmdExecuted"
                  CanExecute="RemovePreliminaryPlayersCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.FinalizePreliminaryPlayersCmd}"
                  Executed="FinalizePreliminaryPlayersCmdExecuted"
                  CanExecute="FinalizePreliminaryPlayersCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.RefreshWallListCmd}"
                  Executed="RefreshWallListCmdExecuted"
                  CanExecute="RefreshWallListCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.ImportPlayersCmd}"
                  Executed="ImportPlayersCmdExecuted"
                  CanExecute="ImportPlayersCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.SetLocalPlayerDbUsageCmd}"
                  Executed="SetLocalPlayerDbUsageCmdExecuted"/>
        <CommandBinding Command="{x:Static custom:MainWindow.SetLocalPlayerDbUaCmd}"
                  Executed="SetLocalPlayerDbUaCmdExecuted"/>
        <CommandBinding Command="{x:Static custom:MainWindow.SetLocalPlayerDbRuCmd}"
                  Executed="SetLocalPlayerDbRuCmdExecuted"/>
        <CommandBinding Command="{x:Static custom:MainWindow.DatabaseImportCmd}"
                  Executed="DatabaseImportCmdExecuted"/>
        <CommandBinding Command="{x:Static custom:MainWindow.NextRoundCmd}"
                  Executed="NextRoundCmdExecuted"/>
        <CommandBinding Command="{x:Static custom:MainWindow.PrevRoundCmd}"
                  Executed="PrevRoundCmdExecuted"/>
        <CommandBinding Command="{x:Static custom:MainWindow.UseTransliterationCmd}"
                  Executed="UseTransliterationCmdExecuted"/>
        <CommandBinding Command="{x:Static custom:MainWindow.GenerateStartNumbersCmd}"
                  Executed="GenerateStartNumbersCmdExecuted"
                        CanExecute="GenerateStartNumbersCmdCanExecute"/>
        <CommandBinding Command="{x:Static custom:MainWindow.TakeCurrentRoundInAccountCmd}"
                  Executed="TakeCurrentRoundInAccountCmdExecuted"
                        CanExecute="TakeCurrentRoundInAccountCmdCanExecute"/>

    </Window.CommandBindings>
    <Grid Name="grdMain" Background="{x:Static SystemColors.ControlBrush}">
        <DockPanel>
            <Menu DockPanel.Dock="Top" HorizontalAlignment="Stretch" VerticalAlignment="Top"  
            DataContext="{Binding
               Source={StaticResource DataContextBridge},
               Path=DataContext}"
              UseLayoutRounding="True" ClipToBounds="True">
                <MenuItem Header="{Binding Capt.Tournament}">
                    <MenuItem Command="ApplicationCommands.New" Header="{Binding Capt.New}" />
                    <Separator />
                    <MenuItem Command="ApplicationCommands.Open" Header="{Binding Capt.Open}" />
                    <MenuItem Command="ApplicationCommands.Save" Header="{Binding Capt.Save}" />
                    <MenuItem Command="{x:Static custom:MainWindow.SaveToCmd}" Header="{Binding Capt.SaveAs}" />
                    <Separator />
                    <MenuItem Command="{x:Static custom:MainWindow.PropertiesCmd}" Header="{Binding Capt.Properties}" />
                    <Separator />
                    <MenuItem Name="mnRecent" Header="{Binding Capt.RecentFiles}">
                    </MenuItem>
                    <MenuItem Command="ApplicationCommands.Close" Header="{Binding Capt.Close}" />
                    <Separator />
                    <MenuItem Command="{x:Static custom:MainWindow.ExitCmd}" Header="{Binding Capt.Exit}" />
                    <Separator />
                    <MenuItem Command="{x:Static custom:MainWindow.UpdateRatingCmd}" Header="Update rating" />
                </MenuItem>
                <MenuItem Header="{Binding Capt.Players}">
                    <MenuItem Header="{Binding Capt.PlayersAdd}" Command="{x:Static custom:MainWindow.AddPlayerCmd}" InputGestureText="Ctrl+R" />
                    <MenuItem Header="{Binding Capt.Import}" Command="{x:Static custom:MainWindow.ImportPlayersCmd}" />
                    <MenuItem Header="{Binding Capt.PreliminaryRegisteredPlayers}">
                        <MenuItem Header="{Binding Capt.FinalizeAll}" Command="{x:Static custom:MainWindow.FinalizePreliminaryPlayersCmd}" />
                        <MenuItem Header="{Binding Capt.DeleteAll}" Command="{x:Static custom:MainWindow.RemovePreliminaryPlayersCmd}" />
                    </MenuItem>
                    <Separator />
                    <MenuItem Name="mnDatabaseUsing" IsCheckable="True" Header="{Binding Capt.UseLocalPlayerDatabase}"  Command="{x:Static custom:MainWindow.SetLocalPlayerDbUsageCmd}" />
                    <MenuItem Name="mnDatabaseSource" Header="{Binding Capt.DatabaseSource}" IsEnabled="{Binding LocalPlayerDbUsage}">
                        <MenuItem Name="mnDatabaseRussian" IsCheckable="True"  Header="{Binding Capt.RussianRatingSystem}" Command="{x:Static custom:MainWindow.SetLocalPlayerDbRuCmd}" />
                        <MenuItem Name="mnDatabaseUkrainian" IsCheckable="True" Header="{Binding Capt.UkrainianRatingSystem}" Command="{x:Static custom:MainWindow.SetLocalPlayerDbUaCmd}" />
                        <Separator />
                        <MenuItem Name="mnDatabaseImport" Header="{Binding Capt.ImportData}" Command="{x:Static custom:MainWindow.DatabaseImportCmd}" />
                    </MenuItem>
                    <Separator />
                    <MenuItem Name="mnUseTransliteration" IsCheckable="True" Header="{Binding Capt.TransliterationSupport}"  Command="{x:Static custom:MainWindow.UseTransliterationCmd}" />
                </MenuItem>
                <MenuItem Header="{Binding Capt.Round}">
                    <MenuItem Name="mnGenerateStartNumbers"  Header="{Binding Capt.GenerateStartNumbers}" Command="{x:Static custom:MainWindow.GenerateStartNumbersCmd}"/>
                    <MenuItem Name="mnAutoPairing"  Header="{Binding Capt.AutoPairing}" Command="{x:Static custom:MainWindow.AutoPairingCmd}"/>
                    <MenuItem Name="mnCleanPairs" Header="{Binding Capt.CleanPairs}" Command="{x:Static custom:MainWindow.CleanPairsCmd}"/>
                    <Separator />
                    <!--MenuItem Name="mnTours_" Header="{Binding Capt.CurrentRound}" ItemsSource="{Binding TourIDs}" IsEnabled="{Binding IsTournamentEnabled}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}">
                            <Setter Property="IsEnabled" Value="True"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="IsChecked"  Value="{Binding Path=Checked}"/>
                            <Setter Property="Header" Value="{Binding Path=Text}" />
                            <Setter Property="Command" Value="{Binding Path=Command}" />
                            <Setter Property="CommandParameter" Value="{Binding Path=Parameter}" />
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem-->
                    <MenuItem Name="mnToursNext" Header="{Binding Capt.NextRound}" IsEnabled="{Binding RoundCanNext}" Command="{x:Static custom:MainWindow.NextRoundCmd}" />
                    <MenuItem Name="mnToursPrev" Header="{Binding Capt.PreviousRound}" IsEnabled="{Binding RoundCanPrev}" Command="{x:Static custom:MainWindow.PrevRoundCmd}" />
                    <MenuItem Name="mnTours" Header="{Binding Capt.CurrentRound}" IsEnabled="{Binding IsTournamentEnabled}" >
                    </MenuItem>
                    <Separator />
                    <MenuItem Name="mnTakeCurrentRoundInAccount" IsCheckable="True" Header="{Binding Capt.TakeCurrentRoundInAccount}"  Command="{x:Static custom:MainWindow.TakeCurrentRoundInAccountCmd}" />
                    <Separator />
                    <MenuItem Header="{Binding Capt.RefreshWallList}" Command="{x:Static custom:MainWindow.RefreshWallListCmd}"/>
                    <Separator />
                    <MenuItem Header="{Binding Capt.AddPair}" Command="{x:Static custom:MainWindow.AddPairCmd}" InputGestureText="Ctrl+G" />
                </MenuItem>
                <MenuItem Header="{Binding Capt.Reports}">
                    <MenuItem Command="ApplicationCommands.Print" Header="{Binding Capt.PrintWallList}" />
                    <MenuItem Command="{x:Static custom:MainWindow.PrintPairingCmd}" Header="{Binding Capt.PrintPairingTable}" />
                    <Separator />
                    <MenuItem Command="{x:Static custom:MainWindow.ExportWallListCmd}" Header="{Binding Capt.ExportWallList}" />
                    <MenuItem Name="mnExportRoundRobin"  Command="{x:Static custom:MainWindow.ExportWallListRoundRobinCmd}" Header="{Binding Capt.ExportWallListRoundRobin}" />
                    <MenuItem Command="{x:Static custom:MainWindow.ExportPairingCmd}" Header="{Binding Capt.ExportPairing}" />
                    <Separator />
                    <MenuItem Command="{x:Static custom:MainWindow.ExportWallListForRatingCmd}" Header="{Binding Capt.ExportWallListForRating}" />
                    <MenuItem Command="{x:Static custom:MainWindow.ExportWallListForRatingEngCmd}" Header="{Binding Capt.ExportWallListForRatingEng}" />
                </MenuItem>
                <MenuItem Header="{Binding Capt.Help}">
                    <MenuItem Header="{Binding Capt.Theme}">
                        <MenuItem Name="mnThemeAero" IsCheckable="True" Command="{x:Static custom:MainWindow.SetThemeAeroCmd}" Header="Aero" />
                        <MenuItem Name="mnThemeLuna" IsCheckable="True" Command="{x:Static custom:MainWindow.SetThemeLunaCmd}" Header="Luna" />
                        <MenuItem Name="mnThemeRoyale" IsCheckable="True" Command="{x:Static custom:MainWindow.SetThemeRoyaleCmd}" Header="Royale" />
                        <MenuItem Name="mnThemeClassic" IsCheckable="True" Command="{x:Static custom:MainWindow.SetThemeClassicCmd}" Header="Classic" />
                        <Separator />
                        <MenuItem Command="{x:Static custom:MainWindow.SetThemeDefaultCmd}" Header="{Binding Capt.CleanTheme}" />
                    </MenuItem>
                    <Separator />
                    <MenuItem Name="mnLangs" Header="{Binding Capt.Language}" />
                    <Separator />
                    <MenuItem Command="{x:Static custom:MainWindow.AboutCmd}" Header="{Binding Capt.About}" />
                </MenuItem>
            </Menu>
            <StatusBar DockPanel.Dock="Bottom" Focusable="False" Height="23" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" HorizontalContentAlignment="Left" BorderThickness="0" OverridesDefaultStyle="False" SnapsToDevicePixels="False" UseLayoutRounding="True" Grid.RowSpan="1" Grid.Column="0" AlternationCount="0" ClipToBounds="False">
                <StatusBarItem BorderThickness="0" Content="{Binding StatusBarMessage}" />
                <StatusBarItem BorderThickness="0" />
            </StatusBar>
            <TabControl HorizontalAlignment="Stretch" Name="tcMain" VerticalAlignment="Stretch" SelectionChanged="tcMain_SelectionChanged">
                <TabItem Name="tiWallList" Header="{Binding Capt.WallList}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <DockPanel>
                        <DockPanel DockPanel.Dock="Bottom" Focusable="False" Visibility="{Binding PagingVisibility}">
                            <Border Name="pnlPager" BorderThickness="1" Margin="10,0,10,0" >
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="100*"/>
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <StackPanel Orientation="Horizontal" VerticalAlignment="Stretch" Margin="0,2" HorizontalAlignment="Left" Grid.Column="0">
                                        <Button Name="btnFirst" Content="&lt;" Command="{Binding GiveItemCommand}" Margin="0,2,2,2"  IsDefault="False" IsEnabled="{Binding PagerCanPrev}" Click="btnFirst_Click" Padding="10,0" />
                                        <Button Name="btnPrev" Content="←" Command="{Binding GiveItemCommand}" Margin="0,2,10,2"  IsDefault="False" IsEnabled="{Binding PagerCanPrev}" Click="btnPrev_Click" Padding="10,0" />
                                        <TextBlock Text="{Binding PagerText}" Margin="0,2,10,2" VerticalAlignment="Center" />
                                        <Button Name="btnNext" Content="→" Command="{Binding GetItemCommand}" Margin="0,2,2,2" IsCancel="False" IsEnabled="{Binding PagerCanNext}" Click="btnNext_Click" Padding="10,0" />
                                        <Button Name="btnLast" Content="&gt;" Command="{Binding GetItemCommand}" Margin="0,2,10,2" IsCancel="False" IsEnabled="{Binding PagerCanNext}" Click="btnLast_Click" Padding="10,0" />
                                    </StackPanel>
                                </Grid>
                            </Border>
                        </DockPanel>
                        
                        <DockPanel>
                            <DataGrid Grid.Row="0"  Name="grdWallList" EnableRowVirtualization="False" ItemsSource="{Binding Path=WallList}"  
                              MouseDoubleClick="grdWallList_MouseDoubleClick" 
                              RowDetailsVisibilityMode="VisibleWhenSelected" 
                              VerticalScrollBarVisibility="Auto" 
                              HorizontalScrollBarVisibility="Auto" 
                              IsHitTestVisible="True" 
                              ClipboardCopyMode="None" 
                              Opacity="1" 
                              HorizontalAlignment="Stretch" 
                              IsReadOnly="True" 
                              AutoGeneratingColumn="grdWallList_AutoGeneratingColumn" 
                              AutoGeneratedColumns="grdWallList_AutoGeneratedColumns" 
                              LoadingRow="grdWallList_LoadingRow" 
                              SelectionMode="Extended" 
                              SelectionUnit="FullRow" 
                              CanUserReorderColumns="False"
                              CanUserResizeRows="False"
                              AlternatingRowBackground="#FFF8F8F5" PreviewKeyDown="grdWallList_PreviewKeyDown" Sorting="grdWallList_Sorting">
                                <DataGrid.ContextMenu>

                                    <ContextMenu>
                                        <MenuItem Header="{Binding Capt.Edit}" Click="mnWallListEdit_Click" IsEnabled="{Binding IsTournamentEnabled}" />
                                        <Separator />
                                        <MenuItem Header="{Binding Capt.Delete}" Click="mnWallListDelete_Click" IsEnabled="{Binding IsTournamentEnabled}" />

                                    </ContextMenu>

                                </DataGrid.ContextMenu>
                            </DataGrid>
                        </DockPanel>

                    </DockPanel>
                </TabItem>
                <TabItem Name="tiPairing" Header="{Binding Capt.Pairing}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <DataGrid 
                              MouseDoubleClick="grdPairing_MouseDoubleClick" 
                              Name="grdPairings" 
                              ItemsSource="{Binding Path=Pairings}"  
                              PreviewKeyDown="grdPairings_PreviewKeyDown"
                              LoadingRow="grdPairings_LoadingRow" 
                              
                              AutoGenerateColumns="False" 
                              EnableRowVirtualization="False" 
                              RowDetailsVisibilityMode="VisibleWhenSelected" 
                              VerticalScrollBarVisibility="Auto" 
                              HorizontalScrollBarVisibility="Auto" 
                              IsHitTestVisible="True" 
                              ClipboardCopyMode="None" 
                              Opacity="1" 
                              HorizontalAlignment="Stretch" 
                              CanUserReorderColumns="False"
                              CanUserResizeRows="False"
                              SelectionMode="Extended" 
                              SelectionUnit="FullRow" 
                              AlternatingRowBackground="#FFF8F8F5" Sorting="grdPairings_Sorting">
                        <DataGrid.ContextMenu>

                            <ContextMenu>
                                <MenuItem Header="{Binding Capt.SwapPlayers}" Click="mnPairSwapPlayers_Click" IsEnabled="{Binding IsTournamentEnabled}" />
                                <Separator />
                                <MenuItem Header="{Binding Capt.Delete}" Click="mnPairDelete_Click" IsEnabled="{Binding IsTournamentEnabled}" />

                            </ContextMenu>

                        </DataGrid.ContextMenu>
                        <DataGrid.Columns>
                            <DataGridTextColumn Binding="{Binding BoardNumber}" HeaderStringFormat="Board" IsReadOnly="True" CellStyle="{StaticResource CenterCellStyle}" />
                            <DataGridTemplateColumn IsReadOnly="True" Width="4">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <ContentPresenter ContentTemplate="{StaticResource PairingMemberColumnCellTemplate}" Content="{Binding IsFirstWon}" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn Binding="{Binding FirstPlayerName}" HeaderStringFormat="Black" IsReadOnly="True" />
                            <DataGridTemplateColumn IsReadOnly="True" Width="4">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <ContentPresenter ContentTemplate="{StaticResource PairingMemberColumnCellTemplate}" Content="{Binding IsSecondWon}"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn Binding="{Binding SecondPlayerName}" HeaderStringFormat="White" IsReadOnly="True" />
                            <DataGridComboBoxColumn x:Name="dgResultKindCombo" HeaderStringFormat="Result" SelectedItemBinding="{Binding Path=Result, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" ItemsSource="{Binding}" CellStyle="{StaticResource CenterCellStyle}" />
                            <DataGridTextColumn Binding="{Binding HandicapText}" HeaderStringFormat="Handicap" IsReadOnly="True" CellStyle="{StaticResource CenterCellStyle}" />
                            <DataGridTextColumn Binding="{Binding HandicapInKomiText}" HeaderStringFormat="Handicap" IsReadOnly="True" CellStyle="{StaticResource CenterCellStyle}" />
                            <DataGridTextColumn Binding="{Binding Comment, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" HeaderStringFormat="Comments" />
                        </DataGrid.Columns>

                    </DataGrid>
                </TabItem>
                <TabItem Name="tiPlayers" Header="{Binding Capt.Players}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <DataGrid 
                              ItemsSource="{Binding Path=Players}"  
                              Name="grdPlayers" 
                              MouseDoubleClick="grdPlayers_MouseDoubleClick" 
                              LoadingRow="grdPlayers_LoadingRow" 
                              PreviewKeyDown="grdPlayers_PreviewKeyDown"
                              
                              AutoGenerateColumns="False" 
                              EnableRowVirtualization="False" 
                              RowDetailsVisibilityMode="VisibleWhenSelected" 
                              VerticalScrollBarVisibility="Auto" 
                              HorizontalScrollBarVisibility="Auto" 
                              IsHitTestVisible="True" 
                              ClipboardCopyMode="None" 
                              Opacity="1" 
                              HorizontalAlignment="Stretch" 
                              CanUserReorderColumns="False"
                              CanUserResizeRows="False"
                              SelectionMode="Extended" 
                              SelectionUnit="FullRow" 
                              AlternatingRowBackground="#FFF8F8F5" Sorting="grdPlayers_Sorting_1">
                        <DataGrid.ContextMenu>

                            <ContextMenu>
                                <MenuItem Header="{Binding Capt.Edit}" Click="mnPlayerEdit_Click" IsEnabled="{Binding IsTournamentEnabled}" />
                                <Separator />
                                <MenuItem Header="{Binding Capt.Delete}" Click="mnPlayerDelete_Click" IsEnabled="{Binding IsTournamentEnabled}" />

                            </ContextMenu>

                        </DataGrid.ContextMenu>
                        <DataGrid.Columns>
                            <DataGridTextColumn Binding="{Binding Name, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" HeaderStringFormat="Name" />
                            <DataGridTextColumn Binding="{Binding InternationalName, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" HeaderStringFormat="InternationalName" Visibility="Hidden"/>
                            <DataGridTextColumn Binding="{Binding AdjustedStartScores, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" HeaderStringFormat="Group" CellStyle="{StaticResource RightCellStyle}" />
                            <DataGridTextColumn Binding="{Binding StartNumber, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" HeaderStringFormat="StartNumber" CellStyle="{StaticResource RightCellStyle}" />
                            <DataGridTextColumn Binding="{Binding RankExt, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" HeaderStringFormat="Rank" IsReadOnly="{Binding IsRankEnabled}" CellStyle="{StaticResource RightCellStyle}" />
                            <DataGridTextColumn Binding="{Binding Rating, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" HeaderStringFormat="Rating" CellStyle="{StaticResource RightCellStyle}" />

                            <DataGridComboBoxColumn x:Name="dgCountryCombo" HeaderStringFormat="Country"
                            SelectedItemBinding="{Binding Path=Country}" 
                            DisplayMemberPath="DisplayName"
                            SelectedValuePath="InternetCode"
                            SelectedValueBinding="{Binding Path=Country, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            ItemsSource="{Binding}" >
                                <DataGridComboBoxColumn.EditingElementStyle>
                                    <Style TargetType="ComboBox">
                                        <Setter Property="IsEditable" Value="True"/>
                                        <Setter Property="IsSynchronizedWithCurrentItem" Value="True" />
                                    </Style>
                                </DataGridComboBoxColumn.EditingElementStyle>
                            </DataGridComboBoxColumn>

                            <DataGridTextColumn Binding="{Binding Club}" HeaderStringFormat="Club" IsReadOnly="True" CellStyle="{StaticResource CenterCellStyle}"/>
                            <DataGridTextColumn Binding="{Binding Team, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" HeaderStringFormat="Team" />
                            <DataGridTextColumn Binding="{Binding Coach, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" HeaderStringFormat="Coach" />
                            <DataGridTextColumn Binding="{Binding NotPlayingInRoundStr}" HeaderStringFormat="Skipping the rounds" IsReadOnly="True" CellStyle="{StaticResource CenterCellStyle}"/>
                            <DataGridTextColumn Binding="{Binding Comment, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" HeaderStringFormat="Comments" />
                        </DataGrid.Columns>
                    </DataGrid>
                </TabItem>
            </TabControl>
        </DockPanel>
    </Grid>
</Window>
